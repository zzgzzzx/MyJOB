/*********************************************************
模块名       : 
文件名       :IdentifySet.cpp
相关文件     :Set.hpp
文件实现功能 :用户标识集合类
作者         :zhangzx 
版本         :1.0 
**********************************************************/
#include "IdentifySet.hpp"
#include "NDFunc.hpp"

/*********************************************************
函数说明：构造函数
入参说明：
出参说明：
返回值  ：
*********************************************************/
CIdentifySet::CIdentifySet()
{

}

/*********************************************************
函数说明：析构函数
入参说明：
出参说明：
返回值  ：
*********************************************************/
CIdentifySet::~CIdentifySet()
{

}

/*********************************************************
函数说明：接收处理数据包
入参说明：
出参说明：
返回值  ：
*********************************************************/
bool CIdentifySet::DealRcvPkt(CHelloPkt *pkt)
{
	return true;
}

/*********************************************************
函数说明:从网关配置数据库中读取MAC与身份的识别码
入参说明：
出参说明：
返回值  ：
*********************************************************/
bool CIdentifySet::ReadMacIdentifyFromGW()
{
	//lewis
	return false;
}

/*********************************************************
函数说明:从网关配置数据库中读取MAC与身份的识别码并处理业务
入参说明：
出参说明：
返回值  ：lewis
*********************************************************/
bool CIdentifySet::InitIdentifyFromGW()
{
	//=============================================================================
	//1、获取下游设备MAC与身份ID对应的关系(从网关数据库获取),并进行数据的初始化
	//读出Mac与身份ID
	//=============================================================================
	ReadMacIdentifyFromGW();

	//=============================================================================
	//2、根据获取的MAC与身份ID，向中心请求身份ID与出口的对应关系(向中心服务器获取)
	//=============================================================================
	CNodeUser pNode= dynamic_cast(AfxGetVPNNode());
	pNode->BindIdentifyService();

	return false;
}

/*********************************************************
函数说明:从ARP表中读取MAC与IP对应关系
入参说明：
出参说明：
返回值  ：lewis
*********************************************************/
bool CIdentifySet::ReadARP()
{
	return false;
}

/*********************************************************
函数说明：超时检测
入参说明：
出参说明：
返回值  ：
*********************************************************/
void CIdentifySet::CheckTimeOut()
{

}

/*********************************************************
函数说明：增加节点
入参说明：
出参说明：
返回值  ：
*********************************************************/
bool CIdentifySet::AddItem(ndString Key,SBindInform *pBI)
{
	mMacMap.insert(pBI->mDevMac, pBI);
	return insert(Key,pBI);
}

/*********************************************************
函数说明：删除节点
入参说明：
出参说明：
返回值  ：
*********************************************************/
bool CIdentifySet::DelItem(ndString Key)
{
	SBindInform *pBI;
	if (!nlfind(Key, pBI)) return false;

	delete pBI;

	mMacMap.erase(Key);
	return nlerase(Key);
}

/*********************************************************
函数说明：查找节点(不加锁)
入参说明：
出参说明：
返回值  ：
*********************************************************/
SBindInform *CIdentifySet::FindItemNL(ndString Key)
{
	SBindInform *pBI;

	if (nlfind(Key,pBI)) return pBI;

	return NULL;
}

/*********************************************************
函数说明：查找节点(加锁)
入参说明：
出参说明：
返回值  ：
*********************************************************/
SBindInform *CIdentifySet::FindItem(ndString Key)
{
	SBindInform *pBI;

	if (find(Key,pBI)) return pBI;

	return NULL;
}

/*********************************************************
函数说明：根据mac查找结点
入参说明：
出参说明：
返回值  ：
*********************************************************/
SBindInform *CIdentifySet::FindItemByMac(ndString mac)
{
	SBindInform *pBI;
	if (mMacMap.find(mac, pBI)) return pBI;

	return NULL;
}


